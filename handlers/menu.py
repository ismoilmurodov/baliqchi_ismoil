from aiogram import Router
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from geopy.geocoders import Nominatim

from back_end import get_categories
from keyboard.kb_menu import location_kb_uz, location_kb_ru
from middlewares import LanguageMiddleware
from state.order_state import OrderState

router = Router()

geolocator = Nominatim(user_agent="my_bot")


# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def create_location_keyboard(lang: str):
    if lang == "uz":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç Joylashuvni yuborish", request_location=True)]
            ],
            resize_keyboard=True
        )
    elif lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]
            ],
            resize_keyboard=True
        )


@router.message(lambda message: message.text in ["üìã Menu", "üìã –ú–µ–Ω—é"])
async def show_location_menu(message: Message, state: FSMContext):
    lang = LanguageMiddleware.get_language(message.from_user.id)

    if lang == "uz":
        await message.answer("Kerakli bo'limni tanlang:", reply_markup=location_kb_uz)
    elif lang == "ru":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=location_kb_ru)


@router.message(lambda message: message.text in ["üìç Joylashuvlar ro'yxati", "üìç –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"])
async def send_location_list(message: Message, state: FSMContext):
    lang = LanguageMiddleware.get_language(message.from_user.id)
    if lang == "uz":
        await message.answer("Joylashuvlar ro'yxati: kerakli manzilni tanlang.")
    elif lang == "ru":
        await message.answer("–°–ø–∏—Å–æ–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ.")


@router.message(lambda message: message.text in ["üìç Joylashuvni yuborish", "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"])
async def send_location_request(message: Message, state: FSMContext):
    lang = LanguageMiddleware.get_language(message.from_user.id)
    location_keyboard = await create_location_keyboard(lang)

    if lang == "uz":
        await message.answer("Iltimos, joylashuvni yuboring!", reply_markup=location_keyboard)

    elif lang == "ru":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=location_keyboard)


def create_default_keyboard(kb_buttons_list):
    keyboard = ReplyKeyboardBuilder()
    for kb_button in kb_buttons_list:
        keyboard.add(types.KeyboardButton(text=kb_button))
        keyboard.row()
    return keyboard.adjust(1, repeat=True).as_markup(resize_keyboard=True)


@router.message(lambda message: message.location is not None)
async def confirm_location(message: Message, state: FSMContext):
    lang = LanguageMiddleware.get_language(message.from_user.id)

    latitude = message.location.latitude
    longitude = message.location.longitude

    location = geolocator.reverse((latitude, longitude), language='uz')

    if location:
        address = location.address
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
        return

    if lang == "uz":
        await message.answer(f"Sizning manzilingiz: {address}\n\nJoylashuvingiz tasdiqlandi! ‚úÖ")
        confirmation_text = "Kategoriyalarni tanlang"
        data = ['üì• Korzinka']
    elif lang == "ru":
        await message.answer(f"–í–∞—à –∞–¥—Ä–µ—Å: {address}\n\n–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! ‚úÖ")
        confirmation_text = "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        data = ['üì• –ö–æ—Ä–∑–∏–Ω–∞']

    categories = get_categories()
    data += [category['name'] for category in categories['categories']]

    keyboard = create_default_keyboard(data)

    await message.answer(confirmation_text, reply_markup=keyboard)

    await state.set_state(OrderState.category)
