from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from back_end import get_categories
from handlers.order import OrderProcess
from keyboard.kb_menu import create_default_keyboard
from keyboard.kb_order import generate_payment_keyboard
from middlewares import LanguageMiddleware
from state.order_state import OrderState

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@router.callback_query(lambda c: c.data.startswith("order"))
async def order_han(callback_query: CallbackQuery, state: FSMContext):
    # print(callback_query.data)
    await callback_query.message.delete()
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã", reply_markup=generate_payment_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(lambda c: c.data.startswith("clear_cart"))
async def clear_cart_handler(callback_query: CallbackQuery, state: FSMContext):
    print('clear_cart')
    # –û—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_products={})
    await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞." if LanguageMiddleware.get_language(
        callback_query.from_user.id) == 'ru' else "–°–∏–∑–Ω–∏–Ω–≥ –∫–æ—Ä–∑–∏–Ω–∞–Ω–≥–∏–∑ —Ç–æ–∑–∞–ª–∞–Ω–≥–∞–Ω.")
    await callback_query.message.answer("Korzinka tozalandi, qayta zakaz qilishingiz mumkin!",
                                        reply_markup=get_categories())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_product_handler(callback_query: CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    lang = LanguageMiddleware.get_language(callback_query.from_user.id)

    # –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if 'order_products' not in data or product_id not in data['order_products']:
        await callback_query.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        return

    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    order_products = data['order_products']
    del order_products[product_id]
    await state.update_data(order_products=order_products)

    await callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã." if LanguageMiddleware.get_language(
        callback_query.from_user.id) == 'ru' else "–ú–∞—Ö—Å—É–ª–æ—Ç –∫–æ—Ä–∑–∏–Ω–∞–¥–∞–Ω —û—á–∏—Ä–∏–ª–¥–∏.")

    data = ['üì• Korzinka'] if lang == 'uz' else ['üì• –ö–æ—Ä–∑–∏–Ω–∞']

    categories = get_categories()
    data += [category['name'] for category in categories['categories']]

    data += ["‚¨ÖÔ∏è Qaytish"] if lang == 'uz' else ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    keyboard = create_default_keyboard(data)

    confirmation_text = "Kategoriyalarni tanlang" if lang == 'uz' else "–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    await callback_query.message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(OrderState.category)
